import{_ as l,c as a,o as h,a3 as i,a4 as e}from"./chunks/framework.BVvB2hL-.js";const _=JSON.parse('{"title":"关于本书","description":"","frontmatter":{},"headers":[],"relativePath":"guide/README.md","filePath":"guide/README.md"}'),t={name:"guide/README.md"},r=i('<blockquote><p>This is the Simplified Chinese translation of <em><a href="https://github.com/DrBoolean/mostly-adequate-guide" target="_blank" rel="noreferrer">mostly-adequate-guide</a></em>, thank Professor <a href="https://github.com/DrBoolean" target="_blank" rel="noreferrer">Franklin Risby</a> for his great work!</p></blockquote><img src="'+e+'"><h1 id="关于本书" tabindex="-1">关于本书 <a class="header-anchor" href="#关于本书" aria-label="Permalink to &quot;关于本书&quot;">​</a></h1><p>这本书的主题是函数范式（functional paradigm），我们将使用 JavaScript 这门世界上最流行的函数式编程语言来讲述这一主题。有人可能会觉得选择 JavaScript 并不明智，因为当前的主流观点认为它是一门命令式（imperative）的语言，并不适合用来讲函数式。但我认为，这是学习函数式编程的最好方式，因为：</p><ul><li><p><strong>你很有可能在日常工作中使用它</strong></p><p>这让你有机会在实际的编程过程中学以致用，而不是在空闲时间用一门深奥的函数式编程语言做一些玩具性质的项目。</p></li><li><p><strong>你不必从头学起就能开始编写程序</strong></p><p>在纯函数式编程语言中，你必须使用 monad 才能打印变量或者读取 DOM 节点。JavaScript 则简单得多，可以作弊走捷径，因为毕竟我们的目的是学写纯函数式代码。JavaScript 也更容易入门，因为它是一门混合范式的语言，你随时可以在感觉吃力的时候回退到原有的编程习惯上去。</p></li><li><p><strong>这门语言完全有能力书写高级的函数式代码</strong></p><p>只需借助一到两个微型类库，JavaScript 就能模拟 Scala 或 Haskell 这类语言的全部特性。虽然面向对象编程（Object-oriented programing）主导着业界，但很明显这种范式在 JavaScript 里非常笨拙，用起来就像在高速公路上露营或者穿着橡胶套鞋跳踢踏舞一样。我们不得不到处使用 <code>bind</code> 以免 <code>this</code> 不知不觉地变了，语言里没有类可以用（目前还没有），我们还发明了各种变通方法来应对忘记调用 <code>new</code> 关键字后的怪异行为，私有成员只能通过闭包（closure）才能实现，等等。对大多数人来说，函数式编程看起来更加自然。</p></li></ul><p>以上说明，强类型的函数式语言毫无疑问将会成为本书所示范式的最佳试验场。JavaScript 是我们学习这种范式的一种手段，将它应用于什么地方则完全取决于你自己。幸运的是，所有的接口都是数学的，因而也是普适的。最终你会发现你习惯了 swiftz、scalaz、haskell 和 purescript，以及其他各种数学偏向的语言。</p><h1 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h1><h2 id="第-1-部分" tabindex="-1">第 1 部分 <a class="header-anchor" href="#第-1-部分" aria-label="Permalink to &quot;第 1 部分&quot;">​</a></h2><ul><li><a href="./ch1.html">第 1 章: 我们在做什么？</a><ul><li><a href="./ch1.html#介绍">介绍</a></li><li><a href="./ch1.html#一个简单例子">一个简单例子</a></li></ul></li><li><a href="./ch2.html">第 2 章: 一等公民的函数</a><ul><li><a href="./ch2.html#快速概览">快速概览</a></li><li><a href="./ch2.html#为何钟爱一等公民">为何钟爱一等公民</a></li></ul></li><li><a href="./ch3.html">第 3 章: 纯函数的好处</a><ul><li><a href="./ch3.html#再次强调“纯”">再次强调“纯”</a></li><li><a href="./ch3.html#副作用可能包括">副作用可能包括...</a></li><li><a href="./ch3.html#八年级数学">八年级数学</a></li><li><a href="./ch3.html#追求“纯”的理由">追求“纯”的理由</a></li><li><a href="./ch3.html#总结">总结</a></li></ul></li><li><a href="./ch4.html">第 4 章: 柯里化（curry）</a><ul><li><a href="./ch4.html#不可或缺的-curry">不可或缺的 curry</a></li><li><a href="./ch4.html#不仅仅是双关语咖喱">不仅仅是双关语／咖喱</a></li><li><a href="./ch4.html#总结">总结</a></li></ul></li><li><a href="./ch5.html">第 5 章: 代码组合（compose）</a><ul><li><a href="./ch5.html#函数饲养">函数饲养</a></li><li><a href="./ch5.html#pointfree">pointfree</a></li><li><a href="./ch5.html#debug">debug</a></li><li><a href="./ch5.html#范畴学">范畴学</a></li><li><a href="./ch5.html#总结">总结</a></li></ul></li><li><a href="./ch6.html">第 6章: 示例应用</a><ul><li><a href="./ch6.html#声明式代码">声明式代码</a></li><li><a href="./ch6.html#一个函数式的-flickr">一个函数式的 flickr</a></li><li><a href="./ch6.html#有原则的重构">有原则的重构</a></li><li><a href="./ch6.html#总结">总结</a></li></ul></li></ul><h2 id="第-2-部分" tabindex="-1">第 2 部分 <a class="header-anchor" href="#第-2-部分" aria-label="Permalink to &quot;第 2 部分&quot;">​</a></h2><ul><li><a href="./ch7.html">第 7 章: Hindley-Milner 类型签名</a><ul><li><a href="./ch7.html#初识类型">初识类型</a></li><li><a href="./ch7.html#神秘的传奇故事">神秘的传奇故事</a></li><li><a href="./ch7.html#缩小可能性范围">缩小可能性范围</a></li><li><a href="./ch7.html#自由定理">自由定理</a></li><li><a href="./ch7.html#总结">总结</a></li></ul></li><li><a href="./ch8.html">第 8 章: 特百惠</a><ul><li><a href="./ch8.html#强大的容器">强大的容器</a></li><li><a href="./ch8.html#第一个-functor">第一个 functor</a></li><li><a href="./ch8.html#薛定谔的-maybe">薛定谔的 Maybe</a></li><li><a href="./ch8.html#“纯”错误处理">“纯”错误处理</a></li><li><a href="./ch8.html#王老先生有作用">王老先生有作用...</a></li><li><a href="./ch8.html#异步任务">异步任务</a></li><li><a href="./ch8.html#一点理论">一点理论</a></li><li><a href="./ch8.html#总结">总结</a></li></ul></li><li><a href="./ch9.html">第 9 章: Monad</a><ul><li><a href="./ch9.html#pointed-functor">pointed functor</a></li><li><a href="./ch9.html#混合比喻">混合比喻</a></li><li><a href="./ch9.html#chain-函数">chain 函数</a></li><li><a href="./ch9.html#理论">理论</a></li><li><a href="./ch9.html#总结">总结</a></li></ul></li><li><a href="./ch10.html">第 10 章: Applicative Functor</a><ul><li><a href="./ch10.html#应用-applicative-functor">应用 applicative functor</a></li><li><a href="./ch10.html#瓶中之船">瓶中之船</a></li><li><a href="./ch10.html#协调与激励">协调与激励</a></li><li><a href="./ch10.html#lift">lift</a></li><li><a href="./ch10.html#免费开瓶器">免费开瓶器</a></li><li><a href="./ch10.html#定律">定律</a></li><li><a href="./ch10.html#总结">总结</a></li></ul></li><li><a href="./ch11.html">第 11 章: 再转换一次，就很自然</a><ul><li><a href="./ch11.html#令人生厌的嵌套">令人生厌的嵌套</a></li><li><a href="./ch11.html#一场情景喜剧">一场情景喜剧</a></li><li><a href="./ch11.html#全都很自然">全都很自然</a></li><li><a href="./ch11.html#有原则的类型转换">有原则的类型转换</a></li><li><a href="./ch11.html#方法狂">方法狂</a></li><li><a href="./ch11.html#同构的-javascript">同构的 JavaScript</a></li><li><a href="./ch11.html#更加宽泛的定义">更加宽泛的定义</a></li><li><a href="./ch11.html#实现单层嵌套的方法">实现单层嵌套的方法</a></li><li><a href="./ch11.html#总结">总结</a></li></ul></li><li><a href="./ch12.html">第 12 章: 遍历</a><ul><li><a href="./ch12.html#类型与类型">类型与类型</a></li><li><a href="./ch12.html#类型风水">类型风水</a></li><li><a href="./ch12.html#作用组合">作用组合</a></li><li><a href="./ch12.html#类型的华尔兹">类型的华尔兹</a></li><li><a href="./ch12.html#定律">定律</a></li><li><a href="./ch12.html#同一律-identity">同一律</a></li><li><a href="./ch12.html#组合-composition">组合</a></li><li><a href="./ch12.html#自然-naturality">自然</a></li><li><a href="./ch12.html#总结">总结</a></li></ul></li><li><a href="./ch13.html">第 13 章：集大成者的 Monoid</a><ul><li><a href="./ch13.html#狂野的-combination">狂野的 Combination</a></li><li><a href="./ch13.html#将加法抽象化">将加法抽象化</a></li><li><a href="./ch13.html#我喜爱的-functor-都是-semigroup">我喜爱的 functor 都是 semigroup</a></li><li><a href="./ch13.html#空的-monoid">空的 Monoid</a></li><li><a href="./ch13.html#把房子折叠起来">把房子折叠起来</a></li><li><a href="./ch13.html#不太算-monoid">不太算 Monoid</a></li><li><a href="./ch13.html#大一统理论">大一统理论</a></li><li><a href="./ch13.html#群论还是范畴论">群论还是范畴论</a></li><li><a href="./ch13.html#总结">总结</a></li></ul></li></ul><h1 id="未来计划" tabindex="-1">未来计划 <a class="header-anchor" href="#未来计划" aria-label="Permalink to &quot;未来计划&quot;">​</a></h1><ul><li>第 1 部分是基础知识。这是初版草稿，所以我会及时更正发现的的错误。欢迎提供帮助！</li><li>第 2 部分讲述类型类（type class），比如 functor 和 monad，最后会讲到到 traversable。我希望能塞进来一些 monad transformer 相关的知识，再写一个纯函数的应用。</li><li>第 3 部分将开始游走于编程实践与学院学究之间。我们将学习 comonad、f-algebra、free monad、yoneda 以及其他一些范畴学概念。</li></ul>',13),c=[r];function f(m,o,n,u,s,d){return h(),a("div",null,c)}const b=l(t,[["render",f]]);export{_ as __pageData,b as default};
